// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"ContractifyProduction/pkg/types"
	"ContractifyProduction/pkg/utils"
	"encoding/json"
	"fmt"
)

// TaskUpdateDueDateDependsOn - Will only be accepted if you pass a `contract_id`
type TaskUpdateDueDateDependsOn string

const (
	TaskUpdateDueDateDependsOnTerminationDate TaskUpdateDueDateDependsOn = "termination_date"
	TaskUpdateDueDateDependsOnEndDate         TaskUpdateDueDateDependsOn = "end_date"
	TaskUpdateDueDateDependsOnStartDate       TaskUpdateDueDateDependsOn = "start_date"
)

func (e TaskUpdateDueDateDependsOn) ToPointer() *TaskUpdateDueDateDependsOn {
	return &e
}

func (e *TaskUpdateDueDateDependsOn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "termination_date":
		fallthrough
	case "end_date":
		fallthrough
	case "start_date":
		*e = TaskUpdateDueDateDependsOn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskUpdateDueDateDependsOn: %v", v)
	}
}

type TaskUpdateStatus string

const (
	TaskUpdateStatusAccomplished    TaskUpdateStatus = "accomplished"
	TaskUpdateStatusNotAccomplished TaskUpdateStatus = "not_accomplished"
	TaskUpdateStatusInProgress      TaskUpdateStatus = "in_progress"
)

func (e TaskUpdateStatus) ToPointer() *TaskUpdateStatus {
	return &e
}

func (e *TaskUpdateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accomplished":
		fallthrough
	case "not_accomplished":
		fallthrough
	case "in_progress":
		*e = TaskUpdateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskUpdateStatus: %v", v)
	}
}

type TaskUpdate struct {
	Description *string `json:"description,omitempty"`
	// Will be overwritten if `due_date_depends_on` and `due_date_interval` are passed
	DueDate *types.Date `json:"due_date,omitempty"`
	// Will only be accepted if you pass a `contract_id`
	DueDateDependsOn *TaskUpdateDueDateDependsOn `json:"due_date_depends_on,omitempty"`
	// Will only be accepted if you pass a `contract_id`
	DueDateInterval    *string           `json:"due_date_interval,omitempty"`
	OwnerID            *int64            `json:"owner_id,omitempty"`
	ReminderDuration   *string           `json:"reminder_duration,omitempty"`
	RepetitionInterval *string           `json:"repetition_interval,omitempty"`
	Status             *TaskUpdateStatus `json:"status,omitempty"`
	Title              *string           `json:"title,omitempty"`
}

func (t TaskUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TaskUpdate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaskUpdate) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *TaskUpdate) GetDueDateDependsOn() *TaskUpdateDueDateDependsOn {
	if o == nil {
		return nil
	}
	return o.DueDateDependsOn
}

func (o *TaskUpdate) GetDueDateInterval() *string {
	if o == nil {
		return nil
	}
	return o.DueDateInterval
}

func (o *TaskUpdate) GetOwnerID() *int64 {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *TaskUpdate) GetReminderDuration() *string {
	if o == nil {
		return nil
	}
	return o.ReminderDuration
}

func (o *TaskUpdate) GetRepetitionInterval() *string {
	if o == nil {
		return nil
	}
	return o.RepetitionInterval
}

func (o *TaskUpdate) GetStatus() *TaskUpdateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TaskUpdate) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}
