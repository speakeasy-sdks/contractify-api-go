// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"ContractifyProduction/pkg/types"
	"ContractifyProduction/pkg/utils"
	"encoding/json"
	"fmt"
)

type TaskReadDueDateDependsOn string

const (
	TaskReadDueDateDependsOnTerminationDate TaskReadDueDateDependsOn = "termination_date"
	TaskReadDueDateDependsOnEndDate         TaskReadDueDateDependsOn = "end_date"
	TaskReadDueDateDependsOnStartDate       TaskReadDueDateDependsOn = "start_date"
)

func (e TaskReadDueDateDependsOn) ToPointer() *TaskReadDueDateDependsOn {
	return &e
}

func (e *TaskReadDueDateDependsOn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "termination_date":
		fallthrough
	case "end_date":
		fallthrough
	case "start_date":
		*e = TaskReadDueDateDependsOn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskReadDueDateDependsOn: %v", v)
	}
}

type TaskReadStatus string

const (
	TaskReadStatusAccomplished    TaskReadStatus = "accomplished"
	TaskReadStatusNotAccomplished TaskReadStatus = "not_accomplished"
	TaskReadStatusInProgress      TaskReadStatus = "in_progress"
)

func (e TaskReadStatus) ToPointer() *TaskReadStatus {
	return &e
}

func (e *TaskReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accomplished":
		fallthrough
	case "not_accomplished":
		fallthrough
	case "in_progress":
		*e = TaskReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskReadStatus: %v", v)
	}
}

type TaskRead struct {
	ContractID         *int64                    `json:"contract_id,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	DueDate            *types.Date               `json:"due_date,omitempty"`
	DueDateDependsOn   *TaskReadDueDateDependsOn `json:"due_date_depends_on,omitempty"`
	DueDateInterval    *string                   `json:"due_date_interval,omitempty"`
	EscalationDate     *types.Date               `json:"escalation_date,omitempty"`
	ID                 *int64                    `json:"id,omitempty"`
	OwnerID            *int64                    `json:"owner_id,omitempty"`
	Permalink          *string                   `json:"permalink,omitempty"`
	ReminderDate       *types.Date               `json:"reminder_date,omitempty"`
	ReminderDuration   *string                   `json:"reminder_duration,omitempty"`
	RepetitionInterval *string                   `json:"repetition_interval,omitempty"`
	Status             *TaskReadStatus           `json:"status,omitempty"`
	Title              *string                   `json:"title,omitempty"`
}

func (t TaskRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TaskRead) GetContractID() *int64 {
	if o == nil {
		return nil
	}
	return o.ContractID
}

func (o *TaskRead) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaskRead) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *TaskRead) GetDueDateDependsOn() *TaskReadDueDateDependsOn {
	if o == nil {
		return nil
	}
	return o.DueDateDependsOn
}

func (o *TaskRead) GetDueDateInterval() *string {
	if o == nil {
		return nil
	}
	return o.DueDateInterval
}

func (o *TaskRead) GetEscalationDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EscalationDate
}

func (o *TaskRead) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TaskRead) GetOwnerID() *int64 {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *TaskRead) GetPermalink() *string {
	if o == nil {
		return nil
	}
	return o.Permalink
}

func (o *TaskRead) GetReminderDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ReminderDate
}

func (o *TaskRead) GetReminderDuration() *string {
	if o == nil {
		return nil
	}
	return o.ReminderDuration
}

func (o *TaskRead) GetRepetitionInterval() *string {
	if o == nil {
		return nil
	}
	return o.RepetitionInterval
}

func (o *TaskRead) GetStatus() *TaskReadStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TaskRead) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}
