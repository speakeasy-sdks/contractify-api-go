// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"ContractifyProduction/pkg/utils"
	"encoding/json"
	"fmt"
	"time"
)

type UserReadRole string

const (
	UserReadRoleAdmin   UserReadRole = "admin"
	UserReadRoleManager UserReadRole = "manager"
	UserReadRoleUser    UserReadRole = "user"
)

func (e UserReadRole) ToPointer() *UserReadRole {
	return &e
}

func (e *UserReadRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "manager":
		fallthrough
	case "user":
		*e = UserReadRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserReadRole: %v", v)
	}
}

type UserRead struct {
	CreatedAt *time.Time    `json:"created_at,omitempty"`
	Email     *string       `json:"email,omitempty"`
	ID        *int64        `json:"id,omitempty"`
	Name      *string       `json:"name,omitempty"`
	Role      *UserReadRole `json:"role,omitempty"`
}

func (u UserRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserRead) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UserRead) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserRead) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserRead) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UserRead) GetRole() *UserReadRole {
	if o == nil {
		return nil
	}
	return o.Role
}
