// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"ContractifyProduction/pkg/models/shared"
	"ContractifyProduction/pkg/utils"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// EsigningStatus - Return documents currently having this status in the eSigning process, can be comma separated
type EsigningStatus string

const (
	EsigningStatusNotSent                    EsigningStatus = "not_sent"
	EsigningStatusSentToLegal                EsigningStatus = "sent_to_legal"
	EsigningStatusLegalDeclined              EsigningStatus = "legal_declined"
	EsigningStatusSent                       EsigningStatus = "sent"
	EsigningStatusSigned                     EsigningStatus = "signed"
	EsigningStatusRejectedBySigner           EsigningStatus = "rejected_by_signer"
	EsigningStatusFinishedButPartiallySigned EsigningStatus = "finished_but_partially_signed"
	EsigningStatusRevoked                    EsigningStatus = "revoked"
)

func (e EsigningStatus) ToPointer() *EsigningStatus {
	return &e
}

func (e *EsigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "not_sent":
		fallthrough
	case "sent_to_legal":
		fallthrough
	case "legal_declined":
		fallthrough
	case "sent":
		fallthrough
	case "signed":
		fallthrough
	case "rejected_by_signer":
		fallthrough
	case "finished_but_partially_signed":
		fallthrough
	case "revoked":
		*e = EsigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EsigningStatus: %v", v)
	}
}

type ListDocumentsRequest struct {
	// Id of the company
	Company int64 `pathParam:"style=simple,explode=false,name=company"`
	// Return documents currently having this status in the eSigning process, can be comma separated
	EsigningStatus *EsigningStatus `queryParam:"style=form,explode=true,name=esigning_status"`
	// Return documents where e-signing was updated after the given date
	EsigningUpdatedAfter *time.Time `queryParam:"style=form,explode=true,name=esigning_updated_after"`
	// The page to retrieve
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Return documents linked to a relation
	RelationID *int64 `queryParam:"style=form,explode=true,name=relation_id"`
	// Return documents e-signed after the given date
	SignedAfter *time.Time `queryParam:"style=form,explode=true,name=signed_after"`
}

func (l ListDocumentsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDocumentsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDocumentsRequest) GetCompany() int64 {
	if o == nil {
		return 0
	}
	return o.Company
}

func (o *ListDocumentsRequest) GetEsigningStatus() *EsigningStatus {
	if o == nil {
		return nil
	}
	return o.EsigningStatus
}

func (o *ListDocumentsRequest) GetEsigningUpdatedAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.EsigningUpdatedAfter
}

func (o *ListDocumentsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListDocumentsRequest) GetRelationID() *int64 {
	if o == nil {
		return nil
	}
	return o.RelationID
}

func (o *ListDocumentsRequest) GetSignedAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.SignedAfter
}

type ListDocumentsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	DocumentCollection *shared.DocumentCollection
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListDocumentsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListDocumentsResponse) GetDocumentCollection() *shared.DocumentCollection {
	if o == nil {
		return nil
	}
	return o.DocumentCollection
}

func (o *ListDocumentsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListDocumentsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
