// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"ContractifyProduction/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListDocumentsSecurity struct {
	OAuth2              string `security:"scheme,type=oauth2,name=Authorization"`
	PersonalAccessToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// ListDocumentsEsigningStatus - Return documents currently having this status in the eSigning process, can be comma separated
type ListDocumentsEsigningStatus string

const (
	ListDocumentsEsigningStatusNotSent                    ListDocumentsEsigningStatus = "not_sent"
	ListDocumentsEsigningStatusSentToLegal                ListDocumentsEsigningStatus = "sent_to_legal"
	ListDocumentsEsigningStatusLegalDeclined              ListDocumentsEsigningStatus = "legal_declined"
	ListDocumentsEsigningStatusSent                       ListDocumentsEsigningStatus = "sent"
	ListDocumentsEsigningStatusSigned                     ListDocumentsEsigningStatus = "signed"
	ListDocumentsEsigningStatusRejectedBySigner           ListDocumentsEsigningStatus = "rejected_by_signer"
	ListDocumentsEsigningStatusFinishedButPartiallySigned ListDocumentsEsigningStatus = "finished_but_partially_signed"
	ListDocumentsEsigningStatusRevoked                    ListDocumentsEsigningStatus = "revoked"
)

func (e ListDocumentsEsigningStatus) ToPointer() *ListDocumentsEsigningStatus {
	return &e
}

func (e *ListDocumentsEsigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "not_sent":
		fallthrough
	case "sent_to_legal":
		fallthrough
	case "legal_declined":
		fallthrough
	case "sent":
		fallthrough
	case "signed":
		fallthrough
	case "rejected_by_signer":
		fallthrough
	case "finished_but_partially_signed":
		fallthrough
	case "revoked":
		*e = ListDocumentsEsigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsEsigningStatus: %v", v)
	}
}

type ListDocumentsRequest struct {
	// Id of the company
	Company int64 `pathParam:"style=simple,explode=false,name=company"`
	// Return documents currently having this status in the eSigning process, can be comma separated
	EsigningStatus *ListDocumentsEsigningStatus `queryParam:"style=form,explode=true,name=esigning_status"`
	// Return documents where e-signing was updated after the given date
	EsigningUpdatedAfter *time.Time `queryParam:"style=form,explode=true,name=esigning_updated_after"`
	// The page to retrieve
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Return documents linked to a relation
	RelationID *int64 `queryParam:"style=form,explode=true,name=relation_id"`
	// Return documents e-signed after the given date
	SignedAfter *time.Time `queryParam:"style=form,explode=true,name=signed_after"`
}

// ListDocuments403ApplicationJSON - Forbidden
type ListDocuments403ApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListDocuments401ApplicationJSON - Unauthenticated
type ListDocuments401ApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

type ListDocumentsResponse struct {
	ContentType string
	// OK
	DocumentCollection *shared.DocumentCollection
	StatusCode         int
	RawResponse        *http.Response
	// Unauthenticated
	ListDocuments401ApplicationJSONObject *ListDocuments401ApplicationJSON
	// Forbidden
	ListDocuments403ApplicationJSONObject *ListDocuments403ApplicationJSON
}
